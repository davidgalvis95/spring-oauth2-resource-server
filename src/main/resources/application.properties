#This will make the instances of this application to start in random ports, perfect for scalability
server.port=0

#This property is needed so that the resource server is able to validate the access token that is provided by the client, against the authorization server
#Spring security will use this uri to discover the authorization keys, and to validate the access token
#The issuer uri, if we are using other auth server, different than keyclock, should be different
#spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/auth/realms/appsdeveloperblog
#This is another way of doing the same, but this time using the jwk which points to the public key endpoint
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8080/auth/realms/appsdeveloperblog/protocol/openid-connect/certs
eureka.client.service-url.defaultZone=http://localhost:8010/eureka
#this is to make the instances of the service distinct for eureka server, we can override the prop instanceId and the props passed here
#when passing through the arguments that are needed
eureka.instance.instance-id=${spring.application.name}:${instanceId:${random.value}}